#!/usr/bin/env ruby

require "docopt"
require_relative "../lib/scanny"
include Scanny::Tools

doc = "Scanny RoR secutiry scanner

Usage:
  scanny [options] <files>...
  scanny (--format <format> --output <output>) <files>...
  scanny (--disable <check_class>) <files>...
  scanny (--include <path>) <files>...
  scanny (--pedantic) <files>...
  scanny --version
  scanny -h | --help

Options:
  -h, --help                        Show this screen.
  -v, --version                     Show version.
  -p, --pedantic                    Enable pedantic mode (for security guys) [default: false].
  -f <format>, --format <format>    Output format (stdout, html, xml) [default: stdout].
  -o <file>, --output <file>        Output file.
  -d <check>, --disable <check>     Disable check class from scanning process.
  -i <check>, --include <check>     Include check to scanning process (file or directory)."

options = Docopt(doc)

pedantic = options[:pedantic]
format   = options[:format].to_s.to_sym
output   = options[:output] ? options[:output].to_s : false

show_version if options[:version]

require_checks(options[:include])
disable_checks(options[:disable])

runner  = Scanny::Runner.new
reports = []
issues  = 0

build_paths.each do |arg|
  Dir[arg].each do |file|
    begin
      reports << runner.check_file(file)
    rescue SyntaxError => e
      $stderr.puts "Can't parse #{file} as Ruby file."
      exit 2
    end
  end
end

unless format == :stdout
  if File.exists?('reports')
    puts "Removing 'reports' directory"
    FileUtils.rm_rf 'reports'
  end
  FileUtils.mkdir 'reports'
end

reports.each do |report|
  issues += report.issues.size
  report_file = File.expand_path(report.file).gsub('/', '|')
  report_path = output || "reports/Test-#{report_file}.#{format}"

  unless format == :stdout
    File.open(report_path, "a+") do |file|
      file << report.send("to_#{format}")
    end
  else
    puts report
  end
end
puts

if issues == 0
  puts "Found no issues."
  exit 0
else
  puts "Found #{issues} issues."
  exit 1
end

