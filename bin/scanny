#!/usr/bin/env ruby

require "docopt"
require_relative "../lib/scanny"
include Scanny::CLI

doc = "Scanny RoR secutiry scanner

Usage:
  scanny [options] <files_or_dirs>...

Options:
  -h, --help                        Show this screen.
  -i <check>, --include <check>     Include check to scanning process (file or directory).
  -d <check>, --disable <check>     Disable check class from scanning process.
  -f <format>, --format <format>    Output format (stdout, html, xml) [default: stdout].
  -s, --strict                      Enable strict mode (for security guys) [default: false].
  -m <mode>, --mode <mode>          Ruby parser mode (18 or 19) [default: 19]"


options = Docopt(doc)

require_checks(options[:include])

runner = Scanny::Runner.new(:parser => use_parser(options[:mode]))

runner_with_custom_checks(runner, options[:disable], options[:strict])
issues  = 0

files = build_paths.map { |arg| Dir[arg].to_a }.flatten

begin
  runner.run(*files)
rescue SyntaxError => e
  $stderr.puts "Can't parse #{runner.file} as Ruby file.",
               "Parser currently is working in #{options[:mode]} mode.",
               "It is possible that your project works with another version of ruby",
               "You can change parser mode with '-m' flag"
  exit 2
end

runner.checks_data.each do |check_data|
  case options[:format]
    when 'xml'
      Scanny::Reporters::XMLReporter.new(check_data).report
    when 'stdout'
      Scanny::Reporters::SimpleReporter.new(check_data).report
    when 'brakeman'
      Scanny::Reporters::BrakemanReporter.new(check_data).report
    else
      raise "Format #{options[:format]} is not supported"
  end
  issues += check_data[:issues].size
end
puts

if issues == 0
  puts "Found no issues."
  exit 0
else
  puts "Found #{issues} issues."
  exit 1
end